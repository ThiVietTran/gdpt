// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: nienkhoatraihuanluyen.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createNienKhoaTraiHuanLuyen = `-- name: CreateNienKhoaTraiHuanLuyen :one
INSERT INTO nienkhoatraihuanluyen (
    traihuanluyen_id, bhd_id, year, ds_huynh_truong_ts, hoidonggiaotho, hoidonggianghuan, banquantrai, camnangtrai
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING traihuanluyen_id, bhd_id, year, ds_huynh_truong_ts, hoidonggiaotho, hoidonggianghuan, banquantrai, camnangtrai
`

type CreateNienKhoaTraiHuanLuyenParams struct {
	TraihuanluyenID  string       `json:"traihuanluyen_id"`
	BhdID            string       `json:"bhd_id"`
	Year             int32        `json:"year"`
	DsHuynhTruongTs  pgtype.JSONB `json:"ds_huynh_truong_ts"`
	Hoidonggiaotho   pgtype.JSONB `json:"hoidonggiaotho"`
	Hoidonggianghuan pgtype.JSONB `json:"hoidonggianghuan"`
	Banquantrai      pgtype.JSONB `json:"banquantrai"`
	Camnangtrai      []byte       `json:"camnangtrai"`
}

func (q *Queries) CreateNienKhoaTraiHuanLuyen(ctx context.Context, arg CreateNienKhoaTraiHuanLuyenParams) (Nienkhoatraihuanluyen, error) {
	row := q.db.QueryRow(ctx, createNienKhoaTraiHuanLuyen,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.DsHuynhTruongTs,
		arg.Hoidonggiaotho,
		arg.Hoidonggianghuan,
		arg.Banquantrai,
		arg.Camnangtrai,
	)
	var i Nienkhoatraihuanluyen
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruongTs,
		&i.Hoidonggiaotho,
		&i.Hoidonggianghuan,
		&i.Banquantrai,
		&i.Camnangtrai,
	)
	return i, err
}

const deleteNienKhoaTraiHuanLuyenByIDAndYear = `-- name: DeleteNienKhoaTraiHuanLuyenByIDAndYear :exec
DELETE FROM nienkhoatraihuanluyen WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3
`

type DeleteNienKhoaTraiHuanLuyenByIDAndYearParams struct {
	TraihuanluyenID string `json:"traihuanluyen_id"`
	BhdID           string `json:"bhd_id"`
	Year            int32  `json:"year"`
}

func (q *Queries) DeleteNienKhoaTraiHuanLuyenByIDAndYear(ctx context.Context, arg DeleteNienKhoaTraiHuanLuyenByIDAndYearParams) error {
	_, err := q.db.Exec(ctx, deleteNienKhoaTraiHuanLuyenByIDAndYear, arg.TraihuanluyenID, arg.BhdID, arg.Year)
	return err
}

const findAllNienKhoaTraiHuanLuyen = `-- name: FindAllNienKhoaTraiHuanLuyen :many
SELECT traihuanluyen_id, bhd_id, year, ds_huynh_truong_ts, hoidonggiaotho, hoidonggianghuan, banquantrai, camnangtrai FROM nienkhoatraihuanluyen
`

func (q *Queries) FindAllNienKhoaTraiHuanLuyen(ctx context.Context) ([]Nienkhoatraihuanluyen, error) {
	rows, err := q.db.Query(ctx, findAllNienKhoaTraiHuanLuyen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Nienkhoatraihuanluyen{}
	for rows.Next() {
		var i Nienkhoatraihuanluyen
		if err := rows.Scan(
			&i.TraihuanluyenID,
			&i.BhdID,
			&i.Year,
			&i.DsHuynhTruongTs,
			&i.Hoidonggiaotho,
			&i.Hoidonggianghuan,
			&i.Banquantrai,
			&i.Camnangtrai,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNienKhoaTraiHuanLuyenByIDAndYear = `-- name: FindNienKhoaTraiHuanLuyenByIDAndYear :one
SELECT traihuanluyen_id, bhd_id, year, ds_huynh_truong_ts, hoidonggiaotho, hoidonggianghuan, banquantrai, camnangtrai FROM nienkhoatraihuanluyen WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3 LIMIT 1
`

type FindNienKhoaTraiHuanLuyenByIDAndYearParams struct {
	TraihuanluyenID string `json:"traihuanluyen_id"`
	BhdID           string `json:"bhd_id"`
	Year            int32  `json:"year"`
}

func (q *Queries) FindNienKhoaTraiHuanLuyenByIDAndYear(ctx context.Context, arg FindNienKhoaTraiHuanLuyenByIDAndYearParams) (Nienkhoatraihuanluyen, error) {
	row := q.db.QueryRow(ctx, findNienKhoaTraiHuanLuyenByIDAndYear, arg.TraihuanluyenID, arg.BhdID, arg.Year)
	var i Nienkhoatraihuanluyen
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruongTs,
		&i.Hoidonggiaotho,
		&i.Hoidonggianghuan,
		&i.Banquantrai,
		&i.Camnangtrai,
	)
	return i, err
}

const updateNienKhoaTraiHuanLuyen = `-- name: UpdateNienKhoaTraiHuanLuyen :one
UPDATE nienkhoatraihuanluyen 
SET 
    ds_huynh_truong_ts = $4, hoidonggiaotho = $5, hoidonggianghuan = $6, banquantrai = $7, camnangtrai = $8
WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3
RETURNING traihuanluyen_id, bhd_id, year, ds_huynh_truong_ts, hoidonggiaotho, hoidonggianghuan, banquantrai, camnangtrai
`

type UpdateNienKhoaTraiHuanLuyenParams struct {
	TraihuanluyenID  string       `json:"traihuanluyen_id"`
	BhdID            string       `json:"bhd_id"`
	Year             int32        `json:"year"`
	DsHuynhTruongTs  pgtype.JSONB `json:"ds_huynh_truong_ts"`
	Hoidonggiaotho   pgtype.JSONB `json:"hoidonggiaotho"`
	Hoidonggianghuan pgtype.JSONB `json:"hoidonggianghuan"`
	Banquantrai      pgtype.JSONB `json:"banquantrai"`
	Camnangtrai      []byte       `json:"camnangtrai"`
}

func (q *Queries) UpdateNienKhoaTraiHuanLuyen(ctx context.Context, arg UpdateNienKhoaTraiHuanLuyenParams) (Nienkhoatraihuanluyen, error) {
	row := q.db.QueryRow(ctx, updateNienKhoaTraiHuanLuyen,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.DsHuynhTruongTs,
		arg.Hoidonggiaotho,
		arg.Hoidonggianghuan,
		arg.Banquantrai,
		arg.Camnangtrai,
	)
	var i Nienkhoatraihuanluyen
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruongTs,
		&i.Hoidonggiaotho,
		&i.Hoidonggianghuan,
		&i.Banquantrai,
		&i.Camnangtrai,
	)
	return i, err
}
