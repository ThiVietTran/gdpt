// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: nienkhoabachoc.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createNienKhoaBacHoc = `-- name: CreateNienKhoaBacHoc :one
INSERT INTO nienkhoabachoc (
    bachoc_id, bhd_id, year, ds_huynh_truong, giao_trinh, giao_tho, bqt
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING bachoc_id, bhd_id, year, ds_huynh_truong, giao_trinh, giao_tho, bqt
`

type CreateNienKhoaBacHocParams struct {
	BachocID      string       `json:"bachoc_id"`
	BhdID         string       `json:"bhd_id"`
	Year          int32        `json:"year"`
	DsHuynhTruong pgtype.JSONB `json:"ds_huynh_truong"`
	GiaoTrinh     string       `json:"giao_trinh"`
	GiaoTho       string       `json:"giao_tho"`
	Bqt           string       `json:"bqt"`
}

func (q *Queries) CreateNienKhoaBacHoc(ctx context.Context, arg CreateNienKhoaBacHocParams) (Nienkhoabachoc, error) {
	row := q.db.QueryRow(ctx, createNienKhoaBacHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.DsHuynhTruong,
		arg.GiaoTrinh,
		arg.GiaoTho,
		arg.Bqt,
	)
	var i Nienkhoabachoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruong,
		&i.GiaoTrinh,
		&i.GiaoTho,
		&i.Bqt,
	)
	return i, err
}

const deleteNienKhoaBacHocByIDAndYear = `-- name: DeleteNienKhoaBacHocByIDAndYear :exec
DELETE FROM nienkhoabachoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3
`

type DeleteNienKhoaBacHocByIDAndYearParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
}

func (q *Queries) DeleteNienKhoaBacHocByIDAndYear(ctx context.Context, arg DeleteNienKhoaBacHocByIDAndYearParams) error {
	_, err := q.db.Exec(ctx, deleteNienKhoaBacHocByIDAndYear, arg.BachocID, arg.BhdID, arg.Year)
	return err
}

const findAllNienKhoaBacHoc = `-- name: FindAllNienKhoaBacHoc :many
SELECT bachoc_id, bhd_id, year, ds_huynh_truong, giao_trinh, giao_tho, bqt FROM nienkhoabachoc
`

func (q *Queries) FindAllNienKhoaBacHoc(ctx context.Context) ([]Nienkhoabachoc, error) {
	rows, err := q.db.Query(ctx, findAllNienKhoaBacHoc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Nienkhoabachoc{}
	for rows.Next() {
		var i Nienkhoabachoc
		if err := rows.Scan(
			&i.BachocID,
			&i.BhdID,
			&i.Year,
			&i.DsHuynhTruong,
			&i.GiaoTrinh,
			&i.GiaoTho,
			&i.Bqt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNienKhoaBacHocByIDAndYear = `-- name: FindNienKhoaBacHocByIDAndYear :one
SELECT bachoc_id, bhd_id, year, ds_huynh_truong, giao_trinh, giao_tho, bqt FROM nienkhoabachoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 LIMIT 1
`

type FindNienKhoaBacHocByIDAndYearParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
}

func (q *Queries) FindNienKhoaBacHocByIDAndYear(ctx context.Context, arg FindNienKhoaBacHocByIDAndYearParams) (Nienkhoabachoc, error) {
	row := q.db.QueryRow(ctx, findNienKhoaBacHocByIDAndYear, arg.BachocID, arg.BhdID, arg.Year)
	var i Nienkhoabachoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruong,
		&i.GiaoTrinh,
		&i.GiaoTho,
		&i.Bqt,
	)
	return i, err
}

const updateNienKhoaBacHoc = `-- name: UpdateNienKhoaBacHoc :one
UPDATE nienkhoabachoc 
SET 
    ds_huynh_truong = $4, giao_trinh = $5, giao_tho = $6, bqt = $7
WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3
RETURNING bachoc_id, bhd_id, year, ds_huynh_truong, giao_trinh, giao_tho, bqt
`

type UpdateNienKhoaBacHocParams struct {
	BachocID      string       `json:"bachoc_id"`
	BhdID         string       `json:"bhd_id"`
	Year          int32        `json:"year"`
	DsHuynhTruong pgtype.JSONB `json:"ds_huynh_truong"`
	GiaoTrinh     string       `json:"giao_trinh"`
	GiaoTho       string       `json:"giao_tho"`
	Bqt           string       `json:"bqt"`
}

func (q *Queries) UpdateNienKhoaBacHoc(ctx context.Context, arg UpdateNienKhoaBacHocParams) (Nienkhoabachoc, error) {
	row := q.db.QueryRow(ctx, updateNienKhoaBacHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.DsHuynhTruong,
		arg.GiaoTrinh,
		arg.GiaoTho,
		arg.Bqt,
	)
	var i Nienkhoabachoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.DsHuynhTruong,
		&i.GiaoTrinh,
		&i.GiaoTho,
		&i.Bqt,
	)
	return i, err
}
