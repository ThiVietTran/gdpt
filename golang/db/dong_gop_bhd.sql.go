// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dong_gop_bhd.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createDongGopBHD = `-- name: CreateDongGopBHD :one
INSERT INTO dong_gop_bhd (
    huynhtruong_id, bhd_id, nam_dong_gop, noi_dung_dong_gop
) VALUES (
    $1, $2, $3, $4
) RETURNING huynhtruong_id, bhd_id, nam_dong_gop, noi_dung_dong_gop
`

type CreateDongGopBHDParams struct {
	HuynhtruongID  string       `json:"huynhtruong_id"`
	BhdID          string       `json:"bhd_id"`
	NamDongGop     int32        `json:"nam_dong_gop"`
	NoiDungDongGop pgtype.JSONB `json:"noi_dung_dong_gop"`
}

func (q *Queries) CreateDongGopBHD(ctx context.Context, arg CreateDongGopBHDParams) (DongGopBhd, error) {
	row := q.db.QueryRow(ctx, createDongGopBHD,
		arg.HuynhtruongID,
		arg.BhdID,
		arg.NamDongGop,
		arg.NoiDungDongGop,
	)
	var i DongGopBhd
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}

const deleteDongGopBHDByIDAndYear = `-- name: DeleteDongGopBHDByIDAndYear :exec
DELETE FROM dong_gop_bhd WHERE huynhtruong_id = $1 AND bhd_id = $2 AND nam_dong_gop = $3
`

type DeleteDongGopBHDByIDAndYearParams struct {
	HuynhtruongID string `json:"huynhtruong_id"`
	BhdID         string `json:"bhd_id"`
	NamDongGop    int32  `json:"nam_dong_gop"`
}

func (q *Queries) DeleteDongGopBHDByIDAndYear(ctx context.Context, arg DeleteDongGopBHDByIDAndYearParams) error {
	_, err := q.db.Exec(ctx, deleteDongGopBHDByIDAndYear, arg.HuynhtruongID, arg.BhdID, arg.NamDongGop)
	return err
}

const findAllDongGopBHD = `-- name: FindAllDongGopBHD :many
SELECT huynhtruong_id, bhd_id, nam_dong_gop, noi_dung_dong_gop FROM dong_gop_bhd
`

func (q *Queries) FindAllDongGopBHD(ctx context.Context) ([]DongGopBhd, error) {
	rows, err := q.db.Query(ctx, findAllDongGopBHD)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DongGopBhd{}
	for rows.Next() {
		var i DongGopBhd
		if err := rows.Scan(
			&i.HuynhtruongID,
			&i.BhdID,
			&i.NamDongGop,
			&i.NoiDungDongGop,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDongGopBHDByIDAndYear = `-- name: FindDongGopBHDByIDAndYear :one
SELECT huynhtruong_id, bhd_id, nam_dong_gop, noi_dung_dong_gop FROM dong_gop_bhd WHERE huynhtruong_id = $1 AND bhd_id = $2 AND nam_dong_gop = $3 LIMIT 1
`

type FindDongGopBHDByIDAndYearParams struct {
	HuynhtruongID string `json:"huynhtruong_id"`
	BhdID         string `json:"bhd_id"`
	NamDongGop    int32  `json:"nam_dong_gop"`
}

func (q *Queries) FindDongGopBHDByIDAndYear(ctx context.Context, arg FindDongGopBHDByIDAndYearParams) (DongGopBhd, error) {
	row := q.db.QueryRow(ctx, findDongGopBHDByIDAndYear, arg.HuynhtruongID, arg.BhdID, arg.NamDongGop)
	var i DongGopBhd
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}

const updateDongGopBHD = `-- name: UpdateDongGopBHD :one
UPDATE dong_gop_bhd 
SET 
    noi_dung_dong_gop = $4
WHERE huynhtruong_id = $1 AND bhd_id = $2 AND nam_dong_gop = $3
RETURNING huynhtruong_id, bhd_id, nam_dong_gop, noi_dung_dong_gop
`

type UpdateDongGopBHDParams struct {
	HuynhtruongID  string       `json:"huynhtruong_id"`
	BhdID          string       `json:"bhd_id"`
	NamDongGop     int32        `json:"nam_dong_gop"`
	NoiDungDongGop pgtype.JSONB `json:"noi_dung_dong_gop"`
}

func (q *Queries) UpdateDongGopBHD(ctx context.Context, arg UpdateDongGopBHDParams) (DongGopBhd, error) {
	row := q.db.QueryRow(ctx, updateDongGopBHD,
		arg.HuynhtruongID,
		arg.BhdID,
		arg.NamDongGop,
		arg.NoiDungDongGop,
	)
	var i DongGopBhd
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}
