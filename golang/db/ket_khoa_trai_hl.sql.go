// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: ket_khoa_trai_hl.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createKetKhoaTraiHL = `-- name: CreateKetKhoaTraiHL :one
INSERT INTO ket_khoa_trai_hl (
    traihuanluyen_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong_ts, de_thi_trac_nghiem, de_thi_viet
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING traihuanluyen_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong_ts, de_thi_trac_nghiem, de_thi_viet
`

type CreateKetKhoaTraiHLParams struct {
	TraihuanluyenID string       `json:"traihuanluyen_id"`
	BhdID           string       `json:"bhd_id"`
	Year            int32        `json:"year"`
	NgayThi         string       `json:"ngay_thi"`
	DiaDiem         string       `json:"dia_diem"`
	DsHuynhTruongTs pgtype.JSONB `json:"ds_huynh_truong_ts"`
	DeThiTracNghiem pgtype.JSONB `json:"de_thi_trac_nghiem"`
	DeThiViet       pgtype.JSONB `json:"de_thi_viet"`
}

func (q *Queries) CreateKetKhoaTraiHL(ctx context.Context, arg CreateKetKhoaTraiHLParams) (KetKhoaTraiHl, error) {
	row := q.db.QueryRow(ctx, createKetKhoaTraiHL,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
		arg.DiaDiem,
		arg.DsHuynhTruongTs,
		arg.DeThiTracNghiem,
		arg.DeThiViet,
	)
	var i KetKhoaTraiHl
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruongTs,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
	)
	return i, err
}

const deleteKetKhoaTraiHLByIDAndDate = `-- name: DeleteKetKhoaTraiHLByIDAndDate :exec
DELETE FROM ket_khoa_trai_hl WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4
`

type DeleteKetKhoaTraiHLByIDAndDateParams struct {
	TraihuanluyenID string `json:"traihuanluyen_id"`
	BhdID           string `json:"bhd_id"`
	Year            int32  `json:"year"`
	NgayThi         string `json:"ngay_thi"`
}

func (q *Queries) DeleteKetKhoaTraiHLByIDAndDate(ctx context.Context, arg DeleteKetKhoaTraiHLByIDAndDateParams) error {
	_, err := q.db.Exec(ctx, deleteKetKhoaTraiHLByIDAndDate,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
	)
	return err
}

const findAllKetKhoaTraiHL = `-- name: FindAllKetKhoaTraiHL :many
SELECT traihuanluyen_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong_ts, de_thi_trac_nghiem, de_thi_viet FROM ket_khoa_trai_hl
`

func (q *Queries) FindAllKetKhoaTraiHL(ctx context.Context) ([]KetKhoaTraiHl, error) {
	rows, err := q.db.Query(ctx, findAllKetKhoaTraiHL)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []KetKhoaTraiHl{}
	for rows.Next() {
		var i KetKhoaTraiHl
		if err := rows.Scan(
			&i.TraihuanluyenID,
			&i.BhdID,
			&i.Year,
			&i.NgayThi,
			&i.DiaDiem,
			&i.DsHuynhTruongTs,
			&i.DeThiTracNghiem,
			&i.DeThiViet,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findKetKhoaTraiHLByIDAndDate = `-- name: FindKetKhoaTraiHLByIDAndDate :one
SELECT traihuanluyen_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong_ts, de_thi_trac_nghiem, de_thi_viet FROM ket_khoa_trai_hl WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4 LIMIT 1
`

type FindKetKhoaTraiHLByIDAndDateParams struct {
	TraihuanluyenID string `json:"traihuanluyen_id"`
	BhdID           string `json:"bhd_id"`
	Year            int32  `json:"year"`
	NgayThi         string `json:"ngay_thi"`
}

func (q *Queries) FindKetKhoaTraiHLByIDAndDate(ctx context.Context, arg FindKetKhoaTraiHLByIDAndDateParams) (KetKhoaTraiHl, error) {
	row := q.db.QueryRow(ctx, findKetKhoaTraiHLByIDAndDate,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
	)
	var i KetKhoaTraiHl
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruongTs,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
	)
	return i, err
}

const updateKetKhoaTraiHL = `-- name: UpdateKetKhoaTraiHL :one
UPDATE ket_khoa_trai_hl 
SET 
    dia_diem = $5, ds_huynh_truong_ts = $6, de_thi_trac_nghiem = $7, de_thi_viet = $8
WHERE traihuanluyen_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4
RETURNING traihuanluyen_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong_ts, de_thi_trac_nghiem, de_thi_viet
`

type UpdateKetKhoaTraiHLParams struct {
	TraihuanluyenID string       `json:"traihuanluyen_id"`
	BhdID           string       `json:"bhd_id"`
	Year            int32        `json:"year"`
	NgayThi         string       `json:"ngay_thi"`
	DiaDiem         string       `json:"dia_diem"`
	DsHuynhTruongTs pgtype.JSONB `json:"ds_huynh_truong_ts"`
	DeThiTracNghiem pgtype.JSONB `json:"de_thi_trac_nghiem"`
	DeThiViet       pgtype.JSONB `json:"de_thi_viet"`
}

func (q *Queries) UpdateKetKhoaTraiHL(ctx context.Context, arg UpdateKetKhoaTraiHLParams) (KetKhoaTraiHl, error) {
	row := q.db.QueryRow(ctx, updateKetKhoaTraiHL,
		arg.TraihuanluyenID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
		arg.DiaDiem,
		arg.DsHuynhTruongTs,
		arg.DeThiTracNghiem,
		arg.DeThiViet,
	)
	var i KetKhoaTraiHl
	err := row.Scan(
		&i.TraihuanluyenID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruongTs,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
	)
	return i, err
}
