// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dong_gop_dv.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createDongGopDV = `-- name: CreateDongGopDV :one
INSERT INTO dong_gop_dv (
    huynhtruong_id, donvi_id, nam_dong_gop, noi_dung_dong_gop
) VALUES (
    $1, $2, $3, $4
) RETURNING huynhtruong_id, donvi_id, nam_dong_gop, noi_dung_dong_gop
`

type CreateDongGopDVParams struct {
	HuynhtruongID  string       `json:"huynhtruong_id"`
	DonviID        string       `json:"donvi_id"`
	NamDongGop     int32        `json:"nam_dong_gop"`
	NoiDungDongGop pgtype.JSONB `json:"noi_dung_dong_gop"`
}

func (q *Queries) CreateDongGopDV(ctx context.Context, arg CreateDongGopDVParams) (DongGopDv, error) {
	row := q.db.QueryRow(ctx, createDongGopDV,
		arg.HuynhtruongID,
		arg.DonviID,
		arg.NamDongGop,
		arg.NoiDungDongGop,
	)
	var i DongGopDv
	err := row.Scan(
		&i.HuynhtruongID,
		&i.DonviID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}

const deleteDongGopDVByIDAndYear = `-- name: DeleteDongGopDVByIDAndYear :exec
DELETE FROM dong_gop_dv WHERE huynhtruong_id = $1 AND donvi_id = $2 AND nam_dong_gop = $3
`

type DeleteDongGopDVByIDAndYearParams struct {
	HuynhtruongID string `json:"huynhtruong_id"`
	DonviID       string `json:"donvi_id"`
	NamDongGop    int32  `json:"nam_dong_gop"`
}

func (q *Queries) DeleteDongGopDVByIDAndYear(ctx context.Context, arg DeleteDongGopDVByIDAndYearParams) error {
	_, err := q.db.Exec(ctx, deleteDongGopDVByIDAndYear, arg.HuynhtruongID, arg.DonviID, arg.NamDongGop)
	return err
}

const findAllDongGopDV = `-- name: FindAllDongGopDV :many
SELECT huynhtruong_id, donvi_id, nam_dong_gop, noi_dung_dong_gop FROM dong_gop_dv
`

func (q *Queries) FindAllDongGopDV(ctx context.Context) ([]DongGopDv, error) {
	rows, err := q.db.Query(ctx, findAllDongGopDV)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DongGopDv{}
	for rows.Next() {
		var i DongGopDv
		if err := rows.Scan(
			&i.HuynhtruongID,
			&i.DonviID,
			&i.NamDongGop,
			&i.NoiDungDongGop,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDongGopDVByIDAndYear = `-- name: FindDongGopDVByIDAndYear :one
SELECT huynhtruong_id, donvi_id, nam_dong_gop, noi_dung_dong_gop FROM dong_gop_dv WHERE huynhtruong_id = $1 AND donvi_id = $2 AND nam_dong_gop = $3 LIMIT 1
`

type FindDongGopDVByIDAndYearParams struct {
	HuynhtruongID string `json:"huynhtruong_id"`
	DonviID       string `json:"donvi_id"`
	NamDongGop    int32  `json:"nam_dong_gop"`
}

func (q *Queries) FindDongGopDVByIDAndYear(ctx context.Context, arg FindDongGopDVByIDAndYearParams) (DongGopDv, error) {
	row := q.db.QueryRow(ctx, findDongGopDVByIDAndYear, arg.HuynhtruongID, arg.DonviID, arg.NamDongGop)
	var i DongGopDv
	err := row.Scan(
		&i.HuynhtruongID,
		&i.DonviID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}

const updateDongGopDV = `-- name: UpdateDongGopDV :one
UPDATE dong_gop_dv 
SET 
    noi_dung_dong_gop = $4
WHERE huynhtruong_id = $1 AND donvi_id = $2 AND nam_dong_gop = $3
RETURNING huynhtruong_id, donvi_id, nam_dong_gop, noi_dung_dong_gop
`

type UpdateDongGopDVParams struct {
	HuynhtruongID  string       `json:"huynhtruong_id"`
	DonviID        string       `json:"donvi_id"`
	NamDongGop     int32        `json:"nam_dong_gop"`
	NoiDungDongGop pgtype.JSONB `json:"noi_dung_dong_gop"`
}

func (q *Queries) UpdateDongGopDV(ctx context.Context, arg UpdateDongGopDVParams) (DongGopDv, error) {
	row := q.db.QueryRow(ctx, updateDongGopDV,
		arg.HuynhtruongID,
		arg.DonviID,
		arg.NamDongGop,
		arg.NoiDungDongGop,
	)
	var i DongGopDv
	err := row.Scan(
		&i.HuynhtruongID,
		&i.DonviID,
		&i.NamDongGop,
		&i.NoiDungDongGop,
	)
	return i, err
}
