// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: thi_bac_hoc.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createThiBacHoc = `-- name: CreateThiBacHoc :one
INSERT INTO thi_bac_hoc (
    bachoc_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong, de_thi_trac_nghiem, de_thi_viet, bien_ban
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING bachoc_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong, de_thi_trac_nghiem, de_thi_viet, bien_ban
`

type CreateThiBacHocParams struct {
	BachocID        string       `json:"bachoc_id"`
	BhdID           string       `json:"bhd_id"`
	Year            int32        `json:"year"`
	NgayThi         string       `json:"ngay_thi"`
	DiaDiem         string       `json:"dia_diem"`
	DsHuynhTruong   pgtype.JSONB `json:"ds_huynh_truong"`
	DeThiTracNghiem []byte       `json:"de_thi_trac_nghiem"`
	DeThiViet       []byte       `json:"de_thi_viet"`
	BienBan         []byte       `json:"bien_ban"`
}

func (q *Queries) CreateThiBacHoc(ctx context.Context, arg CreateThiBacHocParams) (ThiBacHoc, error) {
	row := q.db.QueryRow(ctx, createThiBacHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
		arg.DiaDiem,
		arg.DsHuynhTruong,
		arg.DeThiTracNghiem,
		arg.DeThiViet,
		arg.BienBan,
	)
	var i ThiBacHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
		&i.BienBan,
	)
	return i, err
}

const deleteThiBacHocByIDAndDate = `-- name: DeleteThiBacHocByIDAndDate :exec
DELETE FROM thi_bac_hoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4
`

type DeleteThiBacHocByIDAndDateParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
	NgayThi  string `json:"ngay_thi"`
}

func (q *Queries) DeleteThiBacHocByIDAndDate(ctx context.Context, arg DeleteThiBacHocByIDAndDateParams) error {
	_, err := q.db.Exec(ctx, deleteThiBacHocByIDAndDate,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
	)
	return err
}

const findAllThiBacHoc = `-- name: FindAllThiBacHoc :many
SELECT bachoc_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong, de_thi_trac_nghiem, de_thi_viet, bien_ban FROM thi_bac_hoc
`

func (q *Queries) FindAllThiBacHoc(ctx context.Context) ([]ThiBacHoc, error) {
	rows, err := q.db.Query(ctx, findAllThiBacHoc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ThiBacHoc{}
	for rows.Next() {
		var i ThiBacHoc
		if err := rows.Scan(
			&i.BachocID,
			&i.BhdID,
			&i.Year,
			&i.NgayThi,
			&i.DiaDiem,
			&i.DsHuynhTruong,
			&i.DeThiTracNghiem,
			&i.DeThiViet,
			&i.BienBan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findThiBacHocByIDAndDate = `-- name: FindThiBacHocByIDAndDate :one
SELECT bachoc_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong, de_thi_trac_nghiem, de_thi_viet, bien_ban FROM thi_bac_hoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4 LIMIT 1
`

type FindThiBacHocByIDAndDateParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
	NgayThi  string `json:"ngay_thi"`
}

func (q *Queries) FindThiBacHocByIDAndDate(ctx context.Context, arg FindThiBacHocByIDAndDateParams) (ThiBacHoc, error) {
	row := q.db.QueryRow(ctx, findThiBacHocByIDAndDate,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
	)
	var i ThiBacHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
		&i.BienBan,
	)
	return i, err
}

const updateThiBacHoc = `-- name: UpdateThiBacHoc :one
UPDATE thi_bac_hoc 
SET 
    dia_diem = $5, ds_huynh_truong = $6, de_thi_trac_nghiem = $7, de_thi_viet = $8, bien_ban = $9
WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_thi = $4
RETURNING bachoc_id, bhd_id, year, ngay_thi, dia_diem, ds_huynh_truong, de_thi_trac_nghiem, de_thi_viet, bien_ban
`

type UpdateThiBacHocParams struct {
	BachocID        string       `json:"bachoc_id"`
	BhdID           string       `json:"bhd_id"`
	Year            int32        `json:"year"`
	NgayThi         string       `json:"ngay_thi"`
	DiaDiem         string       `json:"dia_diem"`
	DsHuynhTruong   pgtype.JSONB `json:"ds_huynh_truong"`
	DeThiTracNghiem []byte       `json:"de_thi_trac_nghiem"`
	DeThiViet       []byte       `json:"de_thi_viet"`
	BienBan         []byte       `json:"bien_ban"`
}

func (q *Queries) UpdateThiBacHoc(ctx context.Context, arg UpdateThiBacHocParams) (ThiBacHoc, error) {
	row := q.db.QueryRow(ctx, updateThiBacHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayThi,
		arg.DiaDiem,
		arg.DsHuynhTruong,
		arg.DeThiTracNghiem,
		arg.DeThiViet,
		arg.BienBan,
	)
	var i ThiBacHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayThi,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeThiTracNghiem,
		&i.DeThiViet,
		&i.BienBan,
	)
	return i, err
}
