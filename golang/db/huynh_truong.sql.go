// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: huynh_truong.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createHuynhTruong = `-- name: CreateHuynhTruong :one
INSERT INTO huynh_truong (
    huynhtruong_id, bhd_id, donvi_id, ht_name, ht_anh34, phap_danh, nam_sinh, chanh_quan, 
    dia_chi, trinh_do, nghe_nghiep, hon_nhan, tho_gioi, bac_hoc, trai_huan_luyen, nang_khieu
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, 
    $9, $10, $11, $12, $13, $14, $15, $16
) RETURNING huynhtruong_id, bhd_id, donvi_id, ht_name, ht_anh34, phap_danh, nam_sinh, chanh_quan, dia_chi, trinh_do, nghe_nghiep, hon_nhan, tho_gioi, bac_hoc, trai_huan_luyen, nang_khieu
`

type CreateHuynhTruongParams struct {
	HuynhtruongID string       `json:"huynhtruong_id"`
	BhdID         string       `json:"bhd_id"`
	DonviID       string       `json:"donvi_id"`
	HtName        string       `json:"ht_name"`
	HtAnh34       []byte       `json:"ht_anh34"`
	PhapDanh      string       `json:"phap_danh"`
	NamSinh       string       `json:"nam_sinh"`
	ChanhQuan     string       `json:"chanh_quan"`
	DiaChi        string       `json:"dia_chi"`
	TrinhDo       string       `json:"trinh_do"`
	NgheNghiep    string       `json:"nghe_nghiep"`
	HonNhan       string       `json:"hon_nhan"`
	ThoGioi       pgtype.JSONB `json:"tho_gioi"`
	BacHoc        pgtype.JSONB `json:"bac_hoc"`
	TraiHuanLuyen pgtype.JSONB `json:"trai_huan_luyen"`
	NangKhieu     string       `json:"nang_khieu"`
}

func (q *Queries) CreateHuynhTruong(ctx context.Context, arg CreateHuynhTruongParams) (HuynhTruong, error) {
	row := q.db.QueryRow(ctx, createHuynhTruong,
		arg.HuynhtruongID,
		arg.BhdID,
		arg.DonviID,
		arg.HtName,
		arg.HtAnh34,
		arg.PhapDanh,
		arg.NamSinh,
		arg.ChanhQuan,
		arg.DiaChi,
		arg.TrinhDo,
		arg.NgheNghiep,
		arg.HonNhan,
		arg.ThoGioi,
		arg.BacHoc,
		arg.TraiHuanLuyen,
		arg.NangKhieu,
	)
	var i HuynhTruong
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.DonviID,
		&i.HtName,
		&i.HtAnh34,
		&i.PhapDanh,
		&i.NamSinh,
		&i.ChanhQuan,
		&i.DiaChi,
		&i.TrinhDo,
		&i.NgheNghiep,
		&i.HonNhan,
		&i.ThoGioi,
		&i.BacHoc,
		&i.TraiHuanLuyen,
		&i.NangKhieu,
	)
	return i, err
}

const deleteHuynhTruongByID = `-- name: DeleteHuynhTruongByID :exec
DELETE FROM huynh_truong WHERE huynhtruong_id = $1
`

func (q *Queries) DeleteHuynhTruongByID(ctx context.Context, huynhtruongID string) error {
	_, err := q.db.Exec(ctx, deleteHuynhTruongByID, huynhtruongID)
	return err
}

const findAllHuynhTruong = `-- name: FindAllHuynhTruong :many
SELECT huynhtruong_id, bhd_id, donvi_id, ht_name, ht_anh34, phap_danh, nam_sinh, chanh_quan, dia_chi, trinh_do, nghe_nghiep, hon_nhan, tho_gioi, bac_hoc, trai_huan_luyen, nang_khieu FROM huynh_truong
`

func (q *Queries) FindAllHuynhTruong(ctx context.Context) ([]HuynhTruong, error) {
	rows, err := q.db.Query(ctx, findAllHuynhTruong)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HuynhTruong{}
	for rows.Next() {
		var i HuynhTruong
		if err := rows.Scan(
			&i.HuynhtruongID,
			&i.BhdID,
			&i.DonviID,
			&i.HtName,
			&i.HtAnh34,
			&i.PhapDanh,
			&i.NamSinh,
			&i.ChanhQuan,
			&i.DiaChi,
			&i.TrinhDo,
			&i.NgheNghiep,
			&i.HonNhan,
			&i.ThoGioi,
			&i.BacHoc,
			&i.TraiHuanLuyen,
			&i.NangKhieu,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findHuynhTruongByID = `-- name: FindHuynhTruongByID :one
SELECT huynhtruong_id, bhd_id, donvi_id, ht_name, ht_anh34, phap_danh, nam_sinh, chanh_quan, dia_chi, trinh_do, nghe_nghiep, hon_nhan, tho_gioi, bac_hoc, trai_huan_luyen, nang_khieu FROM huynh_truong WHERE huynhtruong_id = $1 LIMIT 1
`

func (q *Queries) FindHuynhTruongByID(ctx context.Context, huynhtruongID string) (HuynhTruong, error) {
	row := q.db.QueryRow(ctx, findHuynhTruongByID, huynhtruongID)
	var i HuynhTruong
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.DonviID,
		&i.HtName,
		&i.HtAnh34,
		&i.PhapDanh,
		&i.NamSinh,
		&i.ChanhQuan,
		&i.DiaChi,
		&i.TrinhDo,
		&i.NgheNghiep,
		&i.HonNhan,
		&i.ThoGioi,
		&i.BacHoc,
		&i.TraiHuanLuyen,
		&i.NangKhieu,
	)
	return i, err
}

const updateHuynhTruong = `-- name: UpdateHuynhTruong :one
UPDATE huynh_truong 
SET 
    bhd_id = $2, donvi_id = $3, ht_name = $4, ht_anh34 = $5, phap_danh = $6, nam_sinh = $7, 
    chanh_quan = $8, dia_chi = $9, trinh_do = $10, nghe_nghiep = $11, hon_nhan = $12, 
    tho_gioi = $13, bac_hoc = $14, trai_huan_luyen = $15, nang_khieu = $16
WHERE huynhtruong_id = $1 
RETURNING huynhtruong_id, bhd_id, donvi_id, ht_name, ht_anh34, phap_danh, nam_sinh, chanh_quan, dia_chi, trinh_do, nghe_nghiep, hon_nhan, tho_gioi, bac_hoc, trai_huan_luyen, nang_khieu
`

type UpdateHuynhTruongParams struct {
	HuynhtruongID string       `json:"huynhtruong_id"`
	BhdID         string       `json:"bhd_id"`
	DonviID       string       `json:"donvi_id"`
	HtName        string       `json:"ht_name"`
	HtAnh34       []byte       `json:"ht_anh34"`
	PhapDanh      string       `json:"phap_danh"`
	NamSinh       string       `json:"nam_sinh"`
	ChanhQuan     string       `json:"chanh_quan"`
	DiaChi        string       `json:"dia_chi"`
	TrinhDo       string       `json:"trinh_do"`
	NgheNghiep    string       `json:"nghe_nghiep"`
	HonNhan       string       `json:"hon_nhan"`
	ThoGioi       pgtype.JSONB `json:"tho_gioi"`
	BacHoc        pgtype.JSONB `json:"bac_hoc"`
	TraiHuanLuyen pgtype.JSONB `json:"trai_huan_luyen"`
	NangKhieu     string       `json:"nang_khieu"`
}

func (q *Queries) UpdateHuynhTruong(ctx context.Context, arg UpdateHuynhTruongParams) (HuynhTruong, error) {
	row := q.db.QueryRow(ctx, updateHuynhTruong,
		arg.HuynhtruongID,
		arg.BhdID,
		arg.DonviID,
		arg.HtName,
		arg.HtAnh34,
		arg.PhapDanh,
		arg.NamSinh,
		arg.ChanhQuan,
		arg.DiaChi,
		arg.TrinhDo,
		arg.NgheNghiep,
		arg.HonNhan,
		arg.ThoGioi,
		arg.BacHoc,
		arg.TraiHuanLuyen,
		arg.NangKhieu,
	)
	var i HuynhTruong
	err := row.Scan(
		&i.HuynhtruongID,
		&i.BhdID,
		&i.DonviID,
		&i.HtName,
		&i.HtAnh34,
		&i.PhapDanh,
		&i.NamSinh,
		&i.ChanhQuan,
		&i.DiaChi,
		&i.TrinhDo,
		&i.NgheNghiep,
		&i.HonNhan,
		&i.ThoGioi,
		&i.BacHoc,
		&i.TraiHuanLuyen,
		&i.NangKhieu,
	)
	return i, err
}
