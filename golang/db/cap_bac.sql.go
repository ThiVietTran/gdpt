// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cap_bac.sql

package db

import (
	"context"
)

const createCapBac = `-- name: CreateCapBac :one
INSERT INTO cap_bac (id, name) VALUES ($1, $2) RETURNING id, name
`

type CreateCapBacParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateCapBac(ctx context.Context, arg CreateCapBacParams) (CapBac, error) {
	row := q.db.QueryRow(ctx, createCapBac, arg.ID, arg.Name)
	var i CapBac
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCapBacByID = `-- name: DeleteCapBacByID :exec
DELETE FROM cap_bac WHERE id = $1
`

func (q *Queries) DeleteCapBacByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCapBacByID, id)
	return err
}

const findAllCapBac = `-- name: FindAllCapBac :many
SELECT id, name FROM cap_bac
`

func (q *Queries) FindAllCapBac(ctx context.Context) ([]CapBac, error) {
	rows, err := q.db.Query(ctx, findAllCapBac)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CapBac{}
	for rows.Next() {
		var i CapBac
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCapBacByID = `-- name: FindCapBacByID :one
SELECT id, name FROM cap_bac WHERE id = $1 LIMIT 1
`

func (q *Queries) FindCapBacByID(ctx context.Context, id string) (CapBac, error) {
	row := q.db.QueryRow(ctx, findCapBacByID, id)
	var i CapBac
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCapBac = `-- name: UpdateCapBac :one
UPDATE cap_bac SET name = $2 WHERE id = $1 RETURNING id, name
`

type UpdateCapBacParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCapBac(ctx context.Context, arg UpdateCapBacParams) (CapBac, error) {
	row := q.db.QueryRow(ctx, updateCapBac, arg.ID, arg.Name)
	var i CapBac
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
