// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: trai_huan_luyen.sql

package db

import (
	"context"
)

const createTraiHuanLuyen = `-- name: CreateTraiHuanLuyen :one
INSERT INTO trai_huan_luyen (id, name) VALUES ($1, $2) RETURNING id, name
`

type CreateTraiHuanLuyenParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateTraiHuanLuyen(ctx context.Context, arg CreateTraiHuanLuyenParams) (TraiHuanLuyen, error) {
	row := q.db.QueryRow(ctx, createTraiHuanLuyen, arg.ID, arg.Name)
	var i TraiHuanLuyen
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTraiHuanLuyenByID = `-- name: DeleteTraiHuanLuyenByID :exec
DELETE FROM trai_huan_luyen WHERE id = $1
`

func (q *Queries) DeleteTraiHuanLuyenByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTraiHuanLuyenByID, id)
	return err
}

const findAllTraiHuanLuyen = `-- name: FindAllTraiHuanLuyen :many
SELECT id, name FROM trai_huan_luyen
`

func (q *Queries) FindAllTraiHuanLuyen(ctx context.Context) ([]TraiHuanLuyen, error) {
	rows, err := q.db.Query(ctx, findAllTraiHuanLuyen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TraiHuanLuyen{}
	for rows.Next() {
		var i TraiHuanLuyen
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTraiHuanLuyenByID = `-- name: FindTraiHuanLuyenByID :one
SELECT id, name FROM trai_huan_luyen WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTraiHuanLuyenByID(ctx context.Context, id string) (TraiHuanLuyen, error) {
	row := q.db.QueryRow(ctx, findTraiHuanLuyenByID, id)
	var i TraiHuanLuyen
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateTraiHuanLuyen = `-- name: UpdateTraiHuanLuyen :one
UPDATE trai_huan_luyen SET name = $2 WHERE id = $1 RETURNING id, name
`

type UpdateTraiHuanLuyenParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTraiHuanLuyen(ctx context.Context, arg UpdateTraiHuanLuyenParams) (TraiHuanLuyen, error) {
	row := q.db.QueryRow(ctx, updateTraiHuanLuyen, arg.ID, arg.Name)
	var i TraiHuanLuyen
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
