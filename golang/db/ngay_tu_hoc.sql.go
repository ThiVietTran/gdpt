// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ngay_tu_hoc.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createNgayTuHoc = `-- name: CreateNgayTuHoc :one
INSERT INTO ngay_tu_hoc (
    bachoc_id, bhd_id, year, ngay_hoc, dia_diem, ds_huynh_truong, de_tai_hoc, giao_tho, bien_ban
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING bachoc_id, bhd_id, year, ngay_hoc, dia_diem, ds_huynh_truong, de_tai_hoc, giao_tho, bien_ban
`

type CreateNgayTuHocParams struct {
	BachocID      string       `json:"bachoc_id"`
	BhdID         string       `json:"bhd_id"`
	Year          int32        `json:"year"`
	NgayHoc       string       `json:"ngay_hoc"`
	DiaDiem       string       `json:"dia_diem"`
	DsHuynhTruong pgtype.JSONB `json:"ds_huynh_truong"`
	DeTaiHoc      string       `json:"de_tai_hoc"`
	GiaoTho       string       `json:"giao_tho"`
	BienBan       []byte       `json:"bien_ban"`
}

func (q *Queries) CreateNgayTuHoc(ctx context.Context, arg CreateNgayTuHocParams) (NgayTuHoc, error) {
	row := q.db.QueryRow(ctx, createNgayTuHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayHoc,
		arg.DiaDiem,
		arg.DsHuynhTruong,
		arg.DeTaiHoc,
		arg.GiaoTho,
		arg.BienBan,
	)
	var i NgayTuHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayHoc,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeTaiHoc,
		&i.GiaoTho,
		&i.BienBan,
	)
	return i, err
}

const deleteNgayTuHocByIDAndDate = `-- name: DeleteNgayTuHocByIDAndDate :exec
DELETE FROM ngay_tu_hoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_hoc = $4
`

type DeleteNgayTuHocByIDAndDateParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
	NgayHoc  string `json:"ngay_hoc"`
}

func (q *Queries) DeleteNgayTuHocByIDAndDate(ctx context.Context, arg DeleteNgayTuHocByIDAndDateParams) error {
	_, err := q.db.Exec(ctx, deleteNgayTuHocByIDAndDate,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayHoc,
	)
	return err
}

const findAllNgayTuHoc = `-- name: FindAllNgayTuHoc :many
SELECT bachoc_id, bhd_id, year, ngay_hoc, dia_diem, ds_huynh_truong, de_tai_hoc, giao_tho, bien_ban FROM ngay_tu_hoc
`

func (q *Queries) FindAllNgayTuHoc(ctx context.Context) ([]NgayTuHoc, error) {
	rows, err := q.db.Query(ctx, findAllNgayTuHoc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NgayTuHoc{}
	for rows.Next() {
		var i NgayTuHoc
		if err := rows.Scan(
			&i.BachocID,
			&i.BhdID,
			&i.Year,
			&i.NgayHoc,
			&i.DiaDiem,
			&i.DsHuynhTruong,
			&i.DeTaiHoc,
			&i.GiaoTho,
			&i.BienBan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNgayTuHocByIDAndDate = `-- name: FindNgayTuHocByIDAndDate :one
SELECT bachoc_id, bhd_id, year, ngay_hoc, dia_diem, ds_huynh_truong, de_tai_hoc, giao_tho, bien_ban FROM ngay_tu_hoc WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_hoc = $4 LIMIT 1
`

type FindNgayTuHocByIDAndDateParams struct {
	BachocID string `json:"bachoc_id"`
	BhdID    string `json:"bhd_id"`
	Year     int32  `json:"year"`
	NgayHoc  string `json:"ngay_hoc"`
}

func (q *Queries) FindNgayTuHocByIDAndDate(ctx context.Context, arg FindNgayTuHocByIDAndDateParams) (NgayTuHoc, error) {
	row := q.db.QueryRow(ctx, findNgayTuHocByIDAndDate,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayHoc,
	)
	var i NgayTuHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayHoc,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeTaiHoc,
		&i.GiaoTho,
		&i.BienBan,
	)
	return i, err
}

const updateNgayTuHoc = `-- name: UpdateNgayTuHoc :one
UPDATE ngay_tu_hoc 
SET 
    dia_diem = $5, ds_huynh_truong = $6, de_tai_hoc = $7, giao_tho = $8, bien_ban = $9
WHERE bachoc_id = $1 AND bhd_id = $2 AND year = $3 AND ngay_hoc = $4
RETURNING bachoc_id, bhd_id, year, ngay_hoc, dia_diem, ds_huynh_truong, de_tai_hoc, giao_tho, bien_ban
`

type UpdateNgayTuHocParams struct {
	BachocID      string       `json:"bachoc_id"`
	BhdID         string       `json:"bhd_id"`
	Year          int32        `json:"year"`
	NgayHoc       string       `json:"ngay_hoc"`
	DiaDiem       string       `json:"dia_diem"`
	DsHuynhTruong pgtype.JSONB `json:"ds_huynh_truong"`
	DeTaiHoc      string       `json:"de_tai_hoc"`
	GiaoTho       string       `json:"giao_tho"`
	BienBan       []byte       `json:"bien_ban"`
}

func (q *Queries) UpdateNgayTuHoc(ctx context.Context, arg UpdateNgayTuHocParams) (NgayTuHoc, error) {
	row := q.db.QueryRow(ctx, updateNgayTuHoc,
		arg.BachocID,
		arg.BhdID,
		arg.Year,
		arg.NgayHoc,
		arg.DiaDiem,
		arg.DsHuynhTruong,
		arg.DeTaiHoc,
		arg.GiaoTho,
		arg.BienBan,
	)
	var i NgayTuHoc
	err := row.Scan(
		&i.BachocID,
		&i.BhdID,
		&i.Year,
		&i.NgayHoc,
		&i.DiaDiem,
		&i.DsHuynhTruong,
		&i.DeTaiHoc,
		&i.GiaoTho,
		&i.BienBan,
	)
	return i, err
}
